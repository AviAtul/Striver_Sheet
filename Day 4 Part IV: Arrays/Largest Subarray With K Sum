Approach 1:
class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        if(n==0)return 0;
        int ans = 0;
        for(int i = 0; i<n; i++){
            int cnt = 1;
            int sum = A[i];
            if(sum==0){
                ans = max(cnt, ans);
            }for(int j=i+1; j<n; j++){
                sum = sum+A[j];
                cnt++;
                if(sum==0){
                    ans = max(cnt, ans);
                }
            }
        }return ans;
    }
};

Approach 2:(Most Optimal For TestCases with negative elements)
class Solution{
    public:
    int maxLen(vector<int>&A, int n)
    {   
        map<long long, int>mp;
        long long k = 0;
        long long sum = 0;
        int maxL = 0;
        for(int i = 0; i<n; i++){
            sum = sum + A[i];
            if(sum == k){
                maxL = max(maxL, i+1);
            }long long rem = sum-k;
            if(mp.find(rem)!=mp.end()){
                maxL = max(maxL, i-mp[rem]);
            }if(mp.find(sum)==mp.end()){
                mp[sum]=i;
            }
        }return maxL;
    }
};

Approach 3:(Most optimal for non negative elements)
int longestSubarrayWithSumK(vector<int> a, long long k) {
    long long sum = a[0];
    int n = a.size();
    int maxL = 0;
    int left = 0;
    int right = 0;
    while(right<n){
        while(left<=right && sum>k){
            sum = sum-a[left];
            left++;
        }if(sum == k){
            maxL = max(maxL, right-left+1);
        }right++;
        if(right<n)sum = sum+a[right];
    }return maxL;
}
