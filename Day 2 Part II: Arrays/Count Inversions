Approach 1:
#include <bits/stdc++.h> 
long long getInversions(long long *arr, int n){
    int cnt = 0;
    for(int i = 0; i < n; i++){
        for(int j = i+1; j<n; j++){
            if(arr[i]>arr[j]){
                cnt++;
            }
        }
    }return cnt;
}

Approach 2:
#include <bits/stdc++.h> 
long long merge(long long *arr, int low, int mid, int high){
    int ptr1 = low; 
    int ptr2 = mid+1;
    long long cnt = 0;
    vector<int>dummy;
    while(ptr1<=mid && ptr2<=high){
        if(arr[ptr1]>arr[ptr2]){
            cnt = cnt+(mid-ptr1+1);
            dummy.push_back(arr[ptr2]);
            ptr2++;
        }else{
            dummy.push_back(arr[ptr1]);
            ptr1++;
        }
    }while(ptr1<=mid){
        dummy.push_back(arr[ptr1]);
        ptr1++;
    }while(ptr2<=high){
        dummy.push_back(arr[ptr2]);
        ptr2++;
    }for(int i = low; i<=high; i++){
        arr[i] = dummy[i-low];
    }return cnt;
}
long long mergeSort(long long *arr, int low, int high){
    long long cnt = 0;
    if(low>=high)return cnt;
    int mid = (low+high)/2;
    cnt+=mergeSort(arr, low, mid);
    cnt+=mergeSort(arr, mid+1, high);
    cnt+=merge(arr, low, mid, high);
    return cnt;
}
long long getInversions(long long *arr, int n){
    int low = 0;
    int high = n-1;
    return mergeSort(arr, low, high);
    
}
