Approach 1:
class Solution {
private:
    int help(int r, int c) {
        if (r == 0 && c == 0)return 1;
        if (r < 0 || c < 0)return 0;
        int up = help(r - 1, c);
        int left = help(r, c - 1);
        return up + left;
    }

public:
    int uniquePaths(int m, int n) {
        return help(m - 1, n - 1);
    }
};

Approach 2:
class Solution {
private:
    int help(int r, int c, vector<vector<int>>& dp) {
        if (r == 0 && c == 0)return 1;
        if (r < 0 || c < 0)return 0;
        if(dp[r][c] !=-1)return dp[r][c];
        int up = help(r - 1, c, dp);
        int left = help(r, c - 1, dp);
        return dp[r][c] = up + left;
    }

public:
    int uniquePaths(int m, int n) {
        vector<vector<int>>dp(m, vector<int>(n, -1));
        return help(m - 1, n - 1, dp);
    }
};

Approach 3:
class Solution {
private:
    int help(int r, int c) {
        vector<vector<int>>dp(r+1, vector<int>(c+1, -1));
        dp[0][0] = 1;
        for(int i = 0; i<=r; i++){
            for(int j = 0; j<=c; j++){
                if(i==0 && j==0)continue;
                int up = (i-1>=0?dp[i-1][j]:0);
                int left = (j-1>=0?dp[i][j-1]:0);
                dp[i][j] = up+left;
            }
        }return dp[r][c];
    }

public:
    int uniquePaths(int m, int n) {
        return help(m - 1, n - 1);
    }
};

Approach 4:
class Solution {
private:
    int help(int r, int c) {
        vector<int>prev(c+1, 0);
        prev[0] = 1;
        for(int i = 0; i<=r; i++){
            vector<int>curr(c+1, 0);
            for(int j = 0; j<=c; j++){
                if(i==0 && j==0)curr[0]=1;
                else{
                    int up = (i-1>=0?prev[j]:0);
                    int left = (j-1>=0?curr[j-1]:0);
                    curr[j] = up+left;
                }
            }prev = curr;
        }return prev[c];
    }

public:
    int uniquePaths(int m, int n) {
        return help(m - 1, n - 1);
    }
};

Approach 5:
class Solution {
public:
    int uniquePaths(int m, int n) {
        int N = m+n-2;
        int r = m-1;
        double res = 1;
        for(int i = 1; i<=r; i++){
            res = res*(N-r+i)/i;
        }return (int)res;
    }
};
